.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GraphViz2::Parse::Marpa 3"
.TH GraphViz2::Parse::Marpa 3 "2012-03-06" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz2::Parse::Marpa \- Visualize a Marpa grammar as a graph
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&        #!/usr/bin/env perl
\&        
\&        use strict;
\&        use warnings;
\&        
\&        use File::Spec;
\&        
\&        use GraphViz2;
\&        use GraphViz2::Parse::Marpa;
\&        
\&        use Log::Handler;
\&        
\&        use Perl6::Slurp;
\&        
\&        # \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        
\&        my($logger) = Log::Handler \-> new;
\&        
\&        $logger \-> add
\&                (
\&                 screen =>
\&                 {
\&                         maxlevel       => \*(Aqdebug\*(Aq,
\&                         message_layout => \*(Aq%m\*(Aq,
\&                         minlevel       => \*(Aqerror\*(Aq,
\&                 }
\&                );
\&        
\&        my($graph)  = GraphViz2 \-> new
\&                (
\&                 edge   => {color => \*(Aqgrey\*(Aq},
\&                 global => {directed => 1, record_orientation => \*(Aqhorizontal\*(Aq},
\&                 graph  => {rankdir => \*(AqTB\*(Aq},
\&                 logger => $logger,
\&                 node   => {color => \*(Aqblue\*(Aq, shape => \*(Aqoval\*(Aq},
\&                );
\&        my($g)      = GraphViz2::Parse::Marpa \-> new(graph => $graph);
\&        my $grammar = slurp(File::Spec \-> catfile(\*(Aqt\*(Aq, \*(Aqsample.marpa.1.dat\*(Aq) );
\&        
\&        $g \-> create(grammar => $grammar);
\&        
\&        my($format)      = shift || \*(Aqsvg\*(Aq;
\&        my($output_file) = shift || File::Spec \-> catfile(\*(Aqhtml\*(Aq, "parse.marpa.$format");
\&        
\&        $graph \-> run(format => $format, output_file => $output_file);
.Ve
.PP
See scripts/parse.marpa.pl (\*(L"Scripts Shipped with this Module\*(R" in GraphViz2).
.SH "Description"
.IX Header "Description"
Takes a Marpa grammar and converts it into a graph.
.PP
You can write the result in any format supported by Graphviz <http://www.graphviz.org/>.
.PP
Here is the list of output formats <http://www.graphviz.org/content/output-formats>.
.SH "Distributions"
.IX Header "Distributions"
This module is available as a Unix-style distro (*.tgz).
.PP
See http://savage.net.au/Perl\-modules/html/installing\-a\-module.html <http://savage.net.au/Perl-modules/html/installing-a-module.html>
for help on unpacking and installing distros.
.SH "Installation"
.IX Header "Installation"
Install GraphViz2 as you would for any \f(CW\*(C`Perl\*(C'\fR module:
.PP
Run:
.PP
.Vb 1
\&        cpanm GraphViz2
.Ve
.PP
or run:
.PP
.Vb 1
\&        sudo cpan GraphViz2
.Ve
.PP
or unpack the distro, and then either:
.PP
.Vb 4
\&        perl Build.PL
\&        ./Build
\&        ./Build test
\&        sudo ./Build install
.Ve
.PP
or:
.PP
.Vb 4
\&        perl Makefile.PL
\&        make (or dmake or nmake)
\&        make test
\&        make install
.Ve
.SH "Constructor and Initialization"
.IX Header "Constructor and Initialization"
.SS "Calling \fInew()\fP"
.IX Subsection "Calling new()"
\&\f(CW\*(C`new()\*(C'\fR is called as \f(CW\*(C`my($obj) = GraphViz2::Parse::Marpa \-> new(k1 => v1, k2 => v2, ...)\*(C'\fR.
.PP
It returns a new object of type \f(CW\*(C`GraphViz2::Parse::Marpa\*(C'\fR.
.PP
Key-value pairs accepted in the parameter list:
.ie n .IP "o graph => $graphviz_object" 4
.el .IP "o graph => \f(CW$graphviz_object\fR" 4
.IX Item "o graph => $graphviz_object"
This option specifies the GraphViz2 object to use. This allows you to configure it as desired.
.Sp
The default is GraphViz2 \-> new. The default attributes are the same as in the synopsis, above,
except for the graph label of course.
.Sp
This key is optional.
.SH "Methods"
.IX Header "Methods"
.ie n .SS "create(grammar => $grammar)"
.el .SS "create(grammar => \f(CW$grammar\fP)"
.IX Subsection "create(grammar => $grammar)"
Creates the graph, which is accessible via the \fIgraph()\fR method, or via the graph object you passed to \fInew()\fR.
.PP
Returns \f(CW$self\fR for method chaining.
.PP
\&\f(CW$grammar\fR is the set of hashrefs which make up the rule descriptors for the Marpa grammar.
.PP
That is, it is the \fIcontents\fR of the arrayref 'rules', which is one of the keys in the parameter list to Marpa::Grammar's \fInew()\fR.
See t/sample.marpa.1.dat for an example.
.PP
Nodes are given the names of the 'lhs' keys within each rule descriptor (a hashref), with numeric suffixes to separate nodes
which would otherwise have the same name. The numbers are just 1 .. N counting the hashrefs processed in the grammar.
.SS "\fIgraph()\fP"
.IX Subsection "graph()"
Returns the graph object, either the one supplied to \fInew()\fR or the one created during the call to \fInew()\fR.
.SH "FAQ"
.IX Header "FAQ"
See \*(L"\s-1FAQ\s0\*(R" in GraphViz2 and \*(L"Scripts Shipped with this Module\*(R" in GraphViz2.
.SH "Thanks"
.IX Header "Thanks"
Many thanks are due to the people who chose to make Graphviz <http://www.graphviz.org/> Open Source.
.PP
And thanks to Leon Brocard <http://search.cpan.org/~lbrocard/>, who wrote GraphViz, and kindly gave me co-maint of the module.
.SH "Version Numbers"
.IX Header "Version Numbers"
Version numbers < 1.00 represent development versions. From 1.00 up, they are production versions.
.SH "Machine-Readable Change Log"
.IX Header "Machine-Readable Change Log"
The file \s-1CHANGES\s0 was converted into Changelog.ini by Module::Metadata::Changes.
.SH "Support"
.IX Header "Support"
Email the author, or log a bug on \s-1RT:\s0
.PP
<https://rt.cpan.org/Public/Dist/Display.html?Name=GraphViz2>.
.SH "Author"
.IX Header "Author"
GraphViz2 was written by Ron Savage \fI<ron@savage.net.au>\fR in 2011.
.PP
Home page: <http://savage.net.au/index.html>.
.SH "Copyright"
.IX Header "Copyright"
Australian copyright (c) 2011, Ron Savage.
.PP
.Vb 4
\&        All Programs of mine are \*(AqOSI Certified Open Source Software\*(Aq;
\&        you can redistribute them and/or modify them under the terms of
\&        The Artistic License, a copy of which is available at:
\&        http://www.opensource.org/licenses/index.html
.Ve
