.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GraphViz2::Data::Grapher 3"
.TH GraphViz2::Data::Grapher 3 "2012-03-06" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz2::Data::Grapher \- Visualize a data structure as a graph
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&        #!/usr/bin/env perl
\&        
\&        use strict;
\&        use warnings;
\&        
\&        use File::Spec;
\&        
\&        use GraphViz2;
\&        use GraphViz2::Data::Grapher;
\&        
\&        use Log::Handler;
\&        
\&        # \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        
\&        my($logger) = Log::Handler \-> new;
\&        
\&        $logger \-> add
\&                (
\&                 screen =>
\&                 {
\&                         maxlevel       => \*(Aqdebug\*(Aq,
\&                         message_layout => \*(Aq%m\*(Aq,
\&                         minlevel       => \*(Aqerror\*(Aq,
\&                 }
\&                );
\&        
\&        my($sub) = sub{};
\&        my($s)   = 
\&        {
\&                A => 
\&                {
\&                        a => 
\&                        {
\&                        },
\&                        bbbbbb => $sub,
\&                        c123   => $sub,
\&                        d      => \e$sub,
\&                },
\&                C =>
\&                {
\&                        b =>
\&                        {
\&                                a => 
\&                                {
\&                                        a => 
\&                                        {
\&                                        },
\&                                        b => sub{},
\&                                        c => 42,
\&                                },
\&                        },
\&                },
\&                els => [qw(element_1 element_2 element_3)],
\&        };
\&        
\&        my($graph) = GraphViz2 \-> new
\&                (
\&                 edge   => {color => \*(Aqgrey\*(Aq},
\&                 global => {directed => 1},
\&                 graph  => {rankdir => \*(AqTB\*(Aq},
\&                 logger => $logger,
\&                 node   => {color => \*(Aqblue\*(Aq, shape => \*(Aqoval\*(Aq},
\&                );
\&        
\&        my($g)           = GraphViz2::Data::Grapher \-> new(graph => $graph, logger => $logger);
\&        my($format)      = shift || \*(Aqsvg\*(Aq;
\&        my($output_file) = shift || File::Spec \-> catfile(\*(Aqhtml\*(Aq, "parse.data.$format");
\&        
\&        $g \-> create(name => \*(Aqs\*(Aq, thing => $s);
\&        $graph \-> run(format => $format, output_file => $output_file);
\&        
\&        # If you did not provide a GraphViz2 object, do this
\&        # to get access to the auto\-created GraphViz2 object.
\&        
\&        #$g \-> create(name => \*(Aqs\*(Aq, thing => $s);
\&        #$g \-> graph \-> run(format => $format, output_file => $output_file);
\&        
\&        # Or even
\&        
\&        #$g \-> create(name => \*(Aqs\*(Aq, thing => $s)
\&        #\-> graph
\&        #\-> run(format => $format, output_file => $output_file);
.Ve
.PP
See scripts/parse.data.pl (\*(L"Scripts Shipped with this Module\*(R" in GraphViz2).
.SH "Description"
.IX Header "Description"
Takes a Perl data structure and recursively converts it into Tree::DAG_Node object, and then graphs it.
.PP
You can write the result in any format supported by Graphviz <http://www.graphviz.org/>.
.PP
Here is the list of output formats <http://www.graphviz.org/content/output-formats>.
.PP
Within the graph:
.IP "o Array names are preceeded by '@'" 4
.IX Item "o Array names are preceeded by '@'"
.PD 0
.IP "o Code references are preceeded by '&'" 4
.IX Item "o Code references are preceeded by '&'"
.IP "o Hash names are preceeded by '%'" 4
.IX Item "o Hash names are preceeded by '%'"
.IP "o Scalar names are preceeded by '$'" 4
.IX Item "o Scalar names are preceeded by '$'"
.PD
.PP
Hence, a hash ref will look like '%$h'.
.PP
Further, objects of different type have different shapes.
.SH "Distributions"
.IX Header "Distributions"
This module is available as a Unix-style distro (*.tgz).
.PP
See http://savage.net.au/Perl\-modules/html/installing\-a\-module.html <http://savage.net.au/Perl-modules/html/installing-a-module.html>
for help on unpacking and installing distros.
.SH "Installation"
.IX Header "Installation"
Install GraphViz2 as you would for any \f(CW\*(C`Perl\*(C'\fR module:
.PP
Run:
.PP
.Vb 1
\&        cpanm GraphViz2
.Ve
.PP
or run:
.PP
.Vb 1
\&        sudo cpan GraphViz2
.Ve
.PP
or unpack the distro, and then either:
.PP
.Vb 4
\&        perl Build.PL
\&        ./Build
\&        ./Build test
\&        sudo ./Build install
.Ve
.PP
or:
.PP
.Vb 4
\&        perl Makefile.PL
\&        make (or dmake or nmake)
\&        make test
\&        make install
.Ve
.SH "Constructor and Initialization"
.IX Header "Constructor and Initialization"
.SS "Calling \fInew()\fP"
.IX Subsection "Calling new()"
\&\f(CW\*(C`new()\*(C'\fR is called as \f(CW\*(C`my($obj) = GraphViz2::Data::Grapher \-> new(k1 => v1, k2 => v2, ...)\*(C'\fR.
.PP
It returns a new object of type \f(CW\*(C`GraphViz2::Data::Grapher\*(C'\fR.
.PP
Key-value pairs accepted in the parameter list:
.ie n .IP "o graph => $graphviz_object" 4
.el .IP "o graph => \f(CW$graphviz_object\fR" 4
.IX Item "o graph => $graphviz_object"
This option specifies the GraphViz2 object to use. This allows you to configure it as desired.
.Sp
The default is GraphViz2 \-> new. The default attributes are the same as in the synopsis, above,
except for the graph label of course.
.Sp
This key is optional.
.ie n .IP "o logger => $logger_object" 4
.el .IP "o logger => \f(CW$logger_object\fR" 4
.IX Item "o logger => $logger_object"
Provides a logger object so \f(CW$logger_object\fR \-> \f(CW$leve\fRl($message) can be called at certain times.
.Sp
Retrieve and update the value with the \fIlogger()\fR method.
.Sp
The default is ''.
.Sp
At the moment, the logger object is not used. This feature is mainly used for testing.
.SH "Methods"
.IX Header "Methods"
.ie n .SS "create(name => $name, thing => $thing)"
.el .SS "create(name => \f(CW$name\fP, thing => \f(CW$thing\fP)"
.IX Subsection "create(name => $name, thing => $thing)"
Creates the graph, which is accessible via the \fIgraph()\fR method, or via the graph object you passed to \fInew()\fR.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
\&\f(CW$name\fR is the string which will be placed in the root node of the tree.
.PP
If \f(CW$s\fR = {...}, say, use 's', not '$s', because '%$' will be prefixed automatically to the name,
because \f(CW$s\fR is a hashref.
.PP
\&\f(CW$thing\fR is the data stucture to graph.
.SS "\fIgraph()\fP"
.IX Subsection "graph()"
Returns the graph object, either the one supplied to \fInew()\fR or the one created during the call to \fInew()\fR.
.SS "\fItree()\fP"
.IX Subsection "tree()"
Returns the tree object (of type Tree::DAG_Node) built before it is traversed to generate the nodes and edges.
.PP
Traversal does change the attributes of nodes, by storing {record => \f(CW$string\fR} there, so that
edges can be plotted from a parent to its daughters.
.PP
Warning: As the GraphViz2::Data::Grapher object exits its scope, \f(CW$self\fR \-> tree \-> delete_tree is called.
.SH "FAQ"
.IX Header "FAQ"
See \*(L"\s-1FAQ\s0\*(R" in GraphViz2 and \*(L"Scripts Shipped with this Module\*(R" in GraphViz2.
.SH "Thanks"
.IX Header "Thanks"
Many thanks are due to the people who chose to make Graphviz <http://www.graphviz.org/> Open Source.
.PP
And thanks to Leon Brocard <http://search.cpan.org/~lbrocard/>, who wrote GraphViz, and kindly gave me co-maint of the module.
.SH "Version Numbers"
.IX Header "Version Numbers"
Version numbers < 1.00 represent development versions. From 1.00 up, they are production versions.
.SH "Machine-Readable Change Log"
.IX Header "Machine-Readable Change Log"
The file \s-1CHANGES\s0 was converted into Changelog.ini by Module::Metadata::Changes.
.SH "Support"
.IX Header "Support"
Email the author, or log a bug on \s-1RT:\s0
.PP
<https://rt.cpan.org/Public/Dist/Display.html?Name=GraphViz2>.
.SH "Author"
.IX Header "Author"
GraphViz2 was written by Ron Savage \fI<ron@savage.net.au>\fR in 2011.
.PP
Home page: <http://savage.net.au/index.html>.
.SH "Copyright"
.IX Header "Copyright"
Australian copyright (c) 2011, Ron Savage.
.PP
.Vb 4
\&        All Programs of mine are \*(AqOSI Certified Open Source Software\*(Aq;
\&        you can redistribute them and/or modify them under the terms of
\&        The Artistic License, a copy of which is available at:
\&        http://www.opensource.org/licenses/index.html
.Ve
