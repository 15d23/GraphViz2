.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GraphViz2 3"
.TH GraphViz2 3 "2012-03-06" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
GraphViz2 \- A wrapper for AT&T's Graphviz
.SH "Synopsis"
.IX Header "Synopsis"
.SS "Sample output"
.IX Subsection "Sample output"
Unpack the distro and copy html/*.html and html/*.svg to your web server's doc root directory.
.PP
Then, point your browser at 127.0.0.1/index.html.
.PP
Or, hit http://savage.net.au/Perl\-modules/html/graphviz2/index.html <http://savage.net.au/Perl-modules/html/graphviz2/index.html>.
.SS "Perl code"
.IX Subsection "Perl code"
.Vb 1
\&        #!/usr/bin/env perl
\&        
\&        use strict;
\&        use warnings;
\&        
\&        use File::Spec;
\&        
\&        use GraphViz2;
\&        
\&        use Log::Handler;
\&        
\&        # \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        
\&        my($logger) = Log::Handler \-> new;
\&        
\&        $logger \-> add
\&                (
\&                 screen =>
\&                 {
\&                         maxlevel       => \*(Aqdebug\*(Aq,
\&                         message_layout => \*(Aq%m\*(Aq,
\&                         minlevel       => \*(Aqerror\*(Aq,
\&                 }
\&                );
\&        
\&        my($graph) = GraphViz2 \-> new
\&                (
\&                 edge   => {color => \*(Aqgrey\*(Aq},
\&                 global => {directed => 1},
\&                 graph  => {label => \*(AqAdult\*(Aq, rankdir => \*(AqTB\*(Aq},
\&                 logger => $logger,
\&                 node   => {shape => \*(Aqoval\*(Aq},
\&                );
\&        
\&        $graph \-> add_node(name => \*(AqCarnegie\*(Aq, shape => \*(Aqcircle\*(Aq);
\&        $graph \-> add_node(name => \*(AqMurrumbeena\*(Aq, shape => \*(Aqbox\*(Aq, color => \*(Aqgreen\*(Aq);
\&        $graph \-> add_node(name => \*(AqOakleigh\*(Aq,    color => \*(Aqblue\*(Aq);
\&        
\&        $graph \-> add_edge(from => \*(AqMurrumbeena\*(Aq, to    => \*(AqCarnegie\*(Aq, arrowsize => 2);
\&        $graph \-> add_edge(from => \*(AqMurrumbeena\*(Aq, to    => \*(AqOakleigh\*(Aq, color => \*(Aqbrown\*(Aq);
\&        
\&        $graph \-> push_subgraph
\&        (
\&         name  => \*(Aqcluster_1\*(Aq,
\&         graph => {label => \*(AqChild\*(Aq},
\&         node  => {color => \*(Aqmagenta\*(Aq, shape => \*(Aqdiamond\*(Aq},
\&        );
\&        
\&        $graph \-> add_node(name => \*(AqChadstone\*(Aq, shape => \*(Aqhexagon\*(Aq);
\&        $graph \-> add_node(name => \*(AqWaverley\*(Aq, color => \*(Aqorange\*(Aq);
\&        
\&        $graph \-> add_edge(from => \*(AqChadstone\*(Aq, to => \*(AqWaverley\*(Aq);
\&        
\&        $graph \-> pop_subgraph;
\&        
\&        $graph \-> default_node(color => \*(Aqcyan\*(Aq);
\&        
\&        $graph \-> add_node(name => \*(AqMalvern\*(Aq);
\&        $graph \-> add_node(name => \*(AqPrahran\*(Aq, shape => \*(Aqtrapezium\*(Aq);
\&        
\&        $graph \-> add_edge(from => \*(AqMalvern\*(Aq, to => \*(AqPrahran\*(Aq);
\&        $graph \-> add_edge(from => \*(AqMalvern\*(Aq, to => \*(AqMurrumbeena\*(Aq);
\&        
\&        my($format)      = shift || \*(Aqsvg\*(Aq;
\&        my($output_file) = shift || File::Spec \-> catfile(\*(Aqhtml\*(Aq, "sub.graph.$format");
\&        
\&        $graph \-> run(format => $format, output_file => $output_file);
.Ve
.PP
This program ships as scripts/sub.graph.pl. See \*(L"Scripts Shipped with this Module\*(R".
.SH "Description"
.IX Header "Description"
.SS "Overview"
.IX Subsection "Overview"
This module provides a Perl interface to the amazing Graphviz <http://www.graphviz.org/>, an open source graph visualization tool from \s-1AT&T\s0.
.PP
It is called GraphViz2 so that pre-existing code using (the Perl module) GraphViz continues to work.
.PP
To avoid confusion, when I use GraphViz2 (note the capital V), I'm referring to this Perl module, and
when I use Graphviz <http://www.graphviz.org/> (lower-case v) I'm referring to the underlying tool (which is in fact a set of programs).
.PP
This version of GraphViz2 targets V 2.23.6+ of Graphviz <http://www.graphviz.org/>.
.PP
Version 1.00 of GraphViz2 is a complete re-write, by Ron Savage, of GraphViz V 2, which was written by Leon Brocard. The point of the re-write
is to provide access to all the latest options available to users of Graphviz <http://www.graphviz.org/>.
.PP
GraphViz2 V 1 is not backwards compatible with GraphViz V 2, despite the considerable similarity. It was not possible to maintain compatibility
while extending support to all the latest features of Graphviz <http://www.graphviz.org/>.
.PP
To ensure GraphViz2 is a light-weight module, Hash::FieldHash has been used to provide getters and setters,
rather than Moose.
.SS "What is a Graph?"
.IX Subsection "What is a Graph?"
An undirected graph is a collection of nodes optionally linked together with edges.
.PP
A directed graph is the same, except that the edges have a direction, normally indicated by an arrow head.
.PP
A quick inspection of Graphviz <http://www.graphviz.org/>'s gallery <http://www.graphviz.org/Gallery.php> will show better than words
just how good Graphviz <http://www.graphviz.org/> is, and will reinforce the point that humans are very visual creatures.
.SH "Distributions"
.IX Header "Distributions"
This module is available as a Unix-style distro (*.tgz).
.PP
See http://savage.net.au/Perl\-modules/html/installing\-a\-module.html <http://savage.net.au/Perl-modules/html/installing-a-module.html>
for help on unpacking and installing distros.
.SH "Installation"
.IX Header "Installation"
Install GraphViz2 as you would for any \f(CW\*(C`Perl\*(C'\fR module:
.PP
Run:
.PP
.Vb 1
\&        cpanm GraphViz2
.Ve
.PP
or run:
.PP
.Vb 1
\&        sudo cpan GraphViz2
.Ve
.PP
or unpack the distro, and then either:
.PP
.Vb 4
\&        perl Build.PL
\&        ./Build
\&        ./Build test
\&        sudo ./Build install
.Ve
.PP
or:
.PP
.Vb 4
\&        perl Makefile.PL
\&        make (or dmake or nmake)
\&        make test
\&        make install
.Ve
.SH "Constructor and Initialization"
.IX Header "Constructor and Initialization"
.SS "Calling \fInew()\fP"
.IX Subsection "Calling new()"
\&\f(CW\*(C`new()\*(C'\fR is called as \f(CW\*(C`my($obj) = GraphViz2 \-> new(k1 => v1, k2 => v2, ...)\*(C'\fR.
.PP
It returns a new object of type \f(CW\*(C`GraphViz2\*(C'\fR.
.PP
Key-value pairs accepted in the parameter list:
.ie n .IP "o edge => $hashref" 4
.el .IP "o edge => \f(CW$hashref\fR" 4
.IX Item "o edge => $hashref"
The edge key points to a hashref which is used to set default attributes for edges.
.Sp
Hence, allowable keys and values within that hashref are anything supported by Graphviz <http://www.graphviz.org/>.
.Sp
The default is {}.
.Sp
This key is optional.
.ie n .IP "o global => $hashref" 4
.el .IP "o global => \f(CW$hashref\fR" 4
.IX Item "o global => $hashref"
The global key points to a hashref which is used to set attributes for the output stream.
.Sp
Valid keys within this hashref are:
.RS 4
.ie n .IP "o directed => $Boolean" 4
.el .IP "o directed => \f(CW$Boolean\fR" 4
.IX Item "o directed => $Boolean"
This option affects the content of the output stream.
.Sp
directed => 1 outputs 'digraph name {...}', while directed => 0 outputs 'graph name {...}'.
.Sp
At the Perl level, directed graphs have edges with arrow heads, such as '\->', while undirected graphs have
unadorned edges, such as '\-\-'.
.Sp
The default is 0.
.Sp
This key is optional.
.ie n .IP "o driver => $program_name" 4
.el .IP "o driver => \f(CW$program_name\fR" 4
.IX Item "o driver => $program_name"
This option specifies which external program to run to process the output stream.
.Sp
The default is to use File::Which's \fIwhich()\fR method to find the 'dot' program.
.Sp
This key is optional.
.ie n .IP "o format => $string" 4
.el .IP "o format => \f(CW$string\fR" 4
.IX Item "o format => $string"
This option specifies what type of output file to create.
.Sp
The default is 'svg'.
.Sp
Output formats of the form 'png:gd' etc are also supported, but only the component before
the first ':' is validated by GraphViz2.
.Sp
This key is optional.
.ie n .IP "o label => $string" 4
.el .IP "o label => \f(CW$string\fR" 4
.IX Item "o label => $string"
This option specifies what an edge looks like: '\->' for directed graphs and '\-\-' for undirected graphs.
.Sp
You wouldn't normally need to use this option.
.Sp
The default is '\->' if directed is 1, and '\-\-' if directed is 0.
.Sp
This key is optional.
.ie n .IP "o name => $string" 4
.el .IP "o name => \f(CW$string\fR" 4
.IX Item "o name => $string"
This option affects the content of the output stream.
.Sp
name => 'G666' outputs 'digraph G666 {...}'.
.Sp
The default is 'Perl' :\-).
.Sp
This key is optional.
.IP "o record_orientation => /^(?:horizontal|vertical)$/" 4
.IX Item "o record_orientation => /^(?:horizontal|vertical)$/"
This option affects how records are plotted. The value must be 'horizontal' or 'vertical'.
.Sp
The default is 'vertical', which suits GraphViz2::DBI.
.IP "o record_shape => /^(?:M?record)$/" 4
.IX Item "o record_shape => /^(?:M?record)$/"
This option affects the shape of records. The value must be 'Mrecord' or 'record'.
.Sp
Mrecords have nice, rounded corners, whereas plain old records have square corners.
.Sp
The default is 'Mrecord'.
.Sp
See Record shapes <http://www.graphviz.org/content/node-shapes#record> for details.
.ie n .IP "o strict => $Boolean" 4
.el .IP "o strict => \f(CW$Boolean\fR" 4
.IX Item "o strict => $Boolean"
This option affects the content of the output stream.
.Sp
strict => 1 outputs 'strict digraph name {...}', while strict => 0 outputs 'digraph name {...}'.
.Sp
The default is 0.
.Sp
This key is optional.
.ie n .IP "o timeout => $integer" 4
.el .IP "o timeout => \f(CW$integer\fR" 4
.IX Item "o timeout => $integer"
This option specifies how long to wait for the external program before exiting with an error.
.Sp
The default is 10 (seconds).
.Sp
This key is optional.
.RE
.RS 4
.Sp
This key (global) is optional.
.RE
.ie n .IP "o graph => $hashref" 4
.el .IP "o graph => \f(CW$hashref\fR" 4
.IX Item "o graph => $hashref"
The graph key points to a hashref which is used to set default attributes for graphs.
.Sp
Hence, allowable keys and values within that hashref are anything supported by Graphviz <http://www.graphviz.org/>.
.Sp
The default is {}.
.Sp
This key is optional.
.ie n .IP "o logger => $logger_object" 4
.el .IP "o logger => \f(CW$logger_object\fR" 4
.IX Item "o logger => $logger_object"
Provides a logger object so \f(CW$logger_object\fR \-> \f(CW$leve\fRl($message) can be called at certain times.
.Sp
See \*(L"Why such a different approach to logging?\*(R" in the \*(L"\s-1FAQ\s0\*(R" for details.
.Sp
Retrieve and update the value with the \fIlogger()\fR method.
.Sp
The default is ''.
.Sp
See also the verbose option, which can interact with the logger option.
.Sp
This key is optional.
.ie n .IP "o node => $hashref" 4
.el .IP "o node => \f(CW$hashref\fR" 4
.IX Item "o node => $hashref"
The node key points to a hashref which is used to set default attributes for nodes.
.Sp
Hence, allowable keys and values within that hashref are anything supported by Graphviz <http://www.graphviz.org/>.
.Sp
The default is {}.
.Sp
This key is optional.
.ie n .IP "o verbose => $Boolean" 4
.el .IP "o verbose => \f(CW$Boolean\fR" 4
.IX Item "o verbose => $Boolean"
Provides a way to control the amount of output when a logger is not specified.
.Sp
Setting verbose to 0 means print nothing.
.Sp
Setting verbose to 1 means print the log level and the message to \s-1STDOUT\s0, when a logger is not specified.
.Sp
Retrieve and update the value with the \fIverbose()\fR method.
.Sp
The default is 0.
.Sp
See also the logger option, which can interact with the verbose option.
.Sp
This key is optional.
.SS "Validating Parameters"
.IX Subsection "Validating Parameters"
The secondary keys (under the primary keys 'edge|graph|node') are checked against lists of valid attributes (stored at the end of this
module, after the _\|_DATA_\|_ token, and made available using Data::Section::Simple).
.PP
This mechanism has the effect of hard-coding Graphviz <http://www.graphviz.org/> options in the source code of GraphViz2.
.PP
Nevertheless, the implementation of these lists is handled differently from the way it was done in V 2.
.PP
V 3 ships with a set of scripts, scripts/extract.*.pl, which retrieve pages from the Graphviz <http://www.graphviz.org/> web site and
extract the current lists of valid attributes. These are then copied manually into the source code of GraphViz2, meaning any time those
lists change on the Graphviz <http://www.graphviz.org/> web site, it's a trivial matter to update the lists stored within this module.
.PP
See \*(L"Scripts Shipped with this Module\*(R" in GraphViz2.
.SH "Attribute Scope"
.IX Header "Attribute Scope"
.SS "Graph Scope"
.IX Subsection "Graph Scope"
The graphical elements graph, node and edge, have attributes. Attributes can be set when calling \fInew()\fR.
.PP
Within \fInew()\fR, the defaults are graph => {}, node => {}, and edge => {}.
.PP
You override these with code such as new(edge => {color => 'red'}).
.PP
These attributes are pushed onto a scope stack during \fInew()\fR's processing of its parameters, and they apply thereafter until changed.
They are the 'current' attributes. They live at scope level 0 (zero).
.PP
You change the 'current' attributes by calling any of the methods default_edge(%hash), default_graph(%hash) and default_node(%hash).
.PP
See scripts/trivial.pl (\*(L"Scripts Shipped with this Module\*(R" in GraphViz2) for an example.
.SS "Subgraph Scope"
.IX Subsection "Subgraph Scope"
When you wish to create a subgraph, you call push_subgraph(%hash). The word push emphasises that you are moving into a new scope,
and that the default attributes for the new scope are pushed onto the scope stack.
.PP
This module, as with Graphviz <http://www.graphviz.org/>, defaults to using inheritance of attributes.
.PP
That means the parent's 'current' attributes are combined with the parameters to push_subgraph(%hash) to generate a new set of 'current'
attributes for each of the graphical elements, graph, node and edge.
.PP
After a single call to push_subgraph(%hash), these 'current' attributes will live a level 1 in the scope stack.
.PP
See scripts/sub.graph.pl (\*(L"Scripts Shipped with this Module\*(R" in GraphViz2) for an example.
.PP
Another call to push_subgraph(%hash), \fIwithout\fR an intervening call to \fIpop_subgraph()\fR, will repeat the process, leaving you with
a set of attributes at level 2 in the scope stack.
.PP
Both GraphViz2 and Graphviz <http://www.graphviz.org/> handle this situation properly.
.PP
See scripts/sub.sub.graph.pl (\*(L"Scripts Shipped with this Module\*(R" in GraphViz2) for an example.
.PP
At the moment, due to design defects (\s-1IMHO\s0) in the underlying Graphviz <http://www.graphviz.org/> logic, there are some tiny problems with this:
.IP "o A global frame" 4
.IX Item "o A global frame"
I can't see how to make the graph at level 0 in the scope stack have a frame.
.IP "o Frame color" 4
.IX Item "o Frame color"
When you specify graph => {color => 'red'} at the parent level, the subgraph has a red frame.
.Sp
I think a subgraph should control its own frame.
.IP "o Parent and child frames" 4
.IX Item "o Parent and child frames"
When you specify graph => {color => 'red'} at the subgraph level, both that subgraph and it children have red frames.
.Sp
This contradicts what happens at the global level, in that specifying color there does not given the whole graph a frame.
.IP "o Frame visibility" 4
.IX Item "o Frame visibility"
A subgraph is currently forced to have a frame, unless you rig it by specifying a color the same as the background.
.PP
I've posted an email to the Graphviz <http://www.graphviz.org/> mailing list suggesting a new option, framecolor, so deal with
this issue, including a special color of 'invisible'.
.PP
I'm using V 2.26.3 of Graphviz <http://www.graphviz.org/> as I write this (2011\-06\-06).
.SH "Methods"
.IX Header "Methods"
.ie n .SS "add_edge(from => $from_node_name, to => $to_node_name, [label => $label, %hash])"
.el .SS "add_edge(from => \f(CW$from_node_name\fP, to => \f(CW$to_node_name\fP, [label => \f(CW$label\fP, \f(CW%hash\fP])"
.IX Subsection "add_edge(from => $from_node_name, to => $to_node_name, [label => $label, %hash])"
Adds an edge to the graph.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
Here, [] indicate optional parameters.
.PP
Add a edge from 1 node to another.
.PP
\&\f(CW$from_node_name\fR and \f(CW$to_node_name\fR default to ''.
.PP
If either of these node names is unknown, add_node(name => \f(CW$node_name\fR) is called automatically. The lack of
attributes in this call means such nodes are created with the default set of attributes, and that may not
be what you want. To avoid this, you have to call add_node(...) yourself, with the appropriate attributes,
before calling add_edge(...).
.PP
\&\f(CW$label\fR defaults to the value supplied in the call to new(global => {label => '...'}), which in turn defaults
to '\->' for directed graphs and '\-\-' for undirected graphs. You wouldn't normally need to use this option.
.PP
\&\f(CW%hash\fR is any edge attributes accepted as Graphviz attributes <http://www.graphviz.org/content/attrs>. These are validated in exactly
the same way as the edge parameters in the calls to default_edge(%hash), new(edge => {}) and push_subgraph(edge => {}).
.ie n .SS "add_node(name => $node_name, [%hash])"
.el .SS "add_node(name => \f(CW$node_name\fP, [%hash])"
.IX Subsection "add_node(name => $node_name, [%hash])"
Adds a node to the graph.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
If you want to embed newlines or double-quotes in node names or labels, see scripts/quote.pl in \*(L"Scripts Shipped with this Module\*(R" in GraphViz2.
.PP
If you want anonymous nodes, see scripts/anonymous.pl in \*(L"Scripts Shipped with this Module\*(R" in GraphViz2.
.PP
Here, [] indicates an optional parameter.
.PP
\&\f(CW%hash\fR is any node attributes accepted as Graphviz attributes <http://www.graphviz.org/content/attrs>. These are validated in exactly
the same way as the node parameters in the calls to default_node(%hash), new(node => {}) and push_subgraph(node => {}).
.PP
The attribute name 'label' may point to a string or an arrayref. If it is an arrayref:
.IP "o Each element is treated as a label" 4
.IX Item "o Each element is treated as a label"
.PD 0
.IP "o Each label is given a port number (1 .. N)" 4
.IX Item "o Each label is given a port number (1 .. N)"
.IP "o Each label + port appears in a separate, small, rectangle" 4
.IX Item "o Each label + port appears in a separate, small, rectangle"
.IP "o These rectangles are combined into a single node" 4
.IX Item "o These rectangles are combined into a single node"
.IP "o The shape of this node is forced to be a record" 4
.IX Item "o The shape of this node is forced to be a record"
.IP "o Judicious use of '{' and '}' in the label can make this record appear horizontally or vertically, and even nested" 4
.IX Item "o Judicious use of '{' and '}' in the label can make this record appear horizontally or vertically, and even nested"
.PD
.PP
For more details on this complex topic, see Records <http://www.graphviz.org/content/node-shapes#record> and Ports <http://www.graphviz.org/content/attrs#kportPos>.
.SS "default_edge(%hash)"
.IX Subsection "default_edge(%hash)"
Sets defaults attributes for edges added subsequently.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
\&\f(CW%hash\fR is any edge attributes accepted as Graphviz attributes <http://www.graphviz.org/content/attrs>. These are validated in exactly
the same way as the edge parameters in the calls to new(edge => {}) and push_subgraph(edge => {}).
.SS "default_graph(%hash)"
.IX Subsection "default_graph(%hash)"
Sets defaults attributes for the graph.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
\&\f(CW%hash\fR is any graph attributes accepted as Graphviz attributes <http://www.graphviz.org/content/attrs>. These are validated in exactly
the same way as the graph parameter in the calls to new(graph => {}) and push_subgraph(graph => {}).
.SS "default_node(%hash)"
.IX Subsection "default_node(%hash)"
Sets defaults attributes for nodes added subsequently.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
\&\f(CW%hash\fR is any node attributes accepted as Graphviz attributes <http://www.graphviz.org/content/attrs>. These are validated in exactly
the same way as the node parameters in the calls to new(node => {}) and push_subgraph(node => {}).
.SS "\fIdot_input()\fP"
.IX Subsection "dot_input()"
Returns the output stream, formatted nicely, which was passed to the external program (e.g. dot).
.PP
You \fImust\fR call \fIrun()\fR before calling \fIdot_input()\fR, since it is only during the call to \fIrun()\fR that the output stream is
stored in the buffer controlled by \fIdot_input()\fR.
.SS "\fIdot_output()\fP"
.IX Subsection "dot_output()"
Returns the output from calling the external program (e.g. dot).
.PP
You \fImust\fR call \fIrun()\fR before calling \fIdot_output()\fR, since it is only during the call to \fIrun()\fR that the output of the
external program is stored in the buffer controlled by \fIdot_output()\fR.
.PP
This output is available even if \fIrun()\fR does not write the output to a file.
.SS "\fIload_valid_attributes()\fP"
.IX Subsection "load_valid_attributes()"
Load various sets of valid attributes from within the source code of this module, using Data::Section::Simple.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
These attributes are used to validate attributes in many situations.
.PP
You wouldn't normally need to use this method.
.ie n .SS "sub log([$level, $message])"
.el .SS "sub log([$level, \f(CW$message\fP])"
.IX Subsection "sub log([$level, $message])"
Logs the message at the given log level.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
Here, [] indicate optional parameters.
.PP
\&\f(CW$level\fR defaults to 'debug', and \f(CW$message\fR defaults to ''.
.PP
If called with \f(CW$level\fR eq 'error', it dies with \f(CW$message\fR.
.SS "logger($logger_object])"
.IX Subsection "logger($logger_object])"
Gets or sets the log object.
.PP
Here, [] indicates an optional parameter.
.SS "\fIpop_subgraph()\fP"
.IX Subsection "pop_subgraph()"
Pop off and discard the top element of the scope stack.
.PP
Returns \f(CW$self\fR to allow method chaining.
.ie n .SS "push_subgraph([name => $name, edge => {...}, graph => {...}, node => {...}])"
.el .SS "push_subgraph([name => \f(CW$name\fP, edge => {...}, graph => {...}, node => {...}])"
.IX Subsection "push_subgraph([name => $name, edge => {...}, graph => {...}, node => {...}])"
Sets up a new subgraph environment.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
Here, [] indicate optional parameters.
.PP
name => \f(CW$name\fR is the name to assign to the subgraph. Name defaults to ''.
.PP
So, without \f(CW$name\fR, 'subgraph {' is written to the output stream.
.PP
With \f(CW$name\fR, \*(L"subgraph \f(CW$name\fR {\*(R" is written to the output stream.
.PP
Note that subgraph names beginning with 'cluster' are special to Graphviz <http://www.graphviz.org/>.
.PP
edge => {...} is any edge attributes accepted as Graphviz attributes <http://www.graphviz.org/content/attrs>. These are validated in exactly
the same way as the edge parameters in the calls to default_edge(%hash), new(edge => {}) and push_subgraph(edge => {}).
.PP
graph => {...} is any graph attributes accepted as Graphviz attributes <http://www.graphviz.org/content/attrs>. These are validated in exactly
the same way as the graph parameters in the calls to default_graph(%hash), new(graph => {}) and push_subgraph(graph => {}).
.PP
node => {...} is any node attributes accepted as Graphviz attributes <http://www.graphviz.org/content/attrs>. These are validated in exactly
the same way as the node parameters in the calls to default_node(%hash), new(node => {}) and push_subgraph(node => {}).
.SS "\fIreport_valid_attributes()\fP"
.IX Subsection "report_valid_attributes()"
Prints all attributes known to this module.
.PP
Returns nothing.
.PP
You wouldn't normally need to use this method.
.PP
See scripts/report.valid.attributes.pl. See \*(L"Scripts Shipped with this Module\*(R" in GraphViz2.
.ie n .SS "run([driver => $exe, format => $string, timeout => $integer, output_file => $output_file])"
.el .SS "run([driver => \f(CW$exe\fP, format => \f(CW$string\fP, timeout => \f(CW$integer\fP, output_file => \f(CW$output_file\fP])"
.IX Subsection "run([driver => $exe, format => $string, timeout => $integer, output_file => $output_file])"
Runs the given program to process the output stream.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
Here, [] indicate optional parameters.
.PP
\&\f(CW$driver\fR is the name of the external program to run.
.PP
It defaults to the value supplied in the call to new(global => {driver => '...'}), which in turn defaults
to File::Which's which('dot') return value.
.PP
\&\f(CW$format\fR is the type of output file to write.
.PP
It defaults to the value supplied in the call to new(global => {format => '...'}), which in turn defaults
to 'svg'.
.PP
\&\f(CW$timeout\fR is the time in seconds to wait while the external program runs, before dieing with an error.
.PP
It defaults to the value supplied in the call to new(global => {timeout => '...'}), which in turn defaults
to 10.
.PP
\&\f(CW$output_file\fR is the name of the file into which the output from the external program is written.
.PP
Perl's binmode is called on this file.
.PP
There is no default value for \f(CW$output_file\fR. If a value is not supplied for \f(CW$output_file\fR, the only way
to recover the output of the external program is to call \fIdot_output()\fR.
.PP
This method performs a series of tasks:
.IP "o Formats the output stream" 4
.IX Item "o Formats the output stream"
.PD 0
.IP "o Stores the formatted output in a buffer controlled by the \fIdot_input()\fR method" 4
.IX Item "o Stores the formatted output in a buffer controlled by the dot_input() method"
.IP "o Output the output stream to a file" 4
.IX Item "o Output the output stream to a file"
.IP "o Run the chosen external program on that file" 4
.IX Item "o Run the chosen external program on that file"
.IP "o Capture \s-1STDOUT\s0 and \s-1STDERR\s0 from that program" 4
.IX Item "o Capture STDOUT and STDERR from that program"
.IP "o Die if \s-1STDERR\s0 contains anything" 4
.IX Item "o Die if STDERR contains anything"
.IP "o Copies \s-1STDOUT\s0 to the buffer controlled by the \fIdot_output()\fR method" 4
.IX Item "o Copies STDOUT to the buffer controlled by the dot_output() method"
.ie n .IP "o Write the captured contents of \s-1STDOUT\s0 to $output_file, if $output_file has a value" 4
.el .IP "o Write the captured contents of \s-1STDOUT\s0 to \f(CW$output_file\fR, if \f(CW$output_file\fR has a value" 4
.IX Item "o Write the captured contents of STDOUT to $output_file, if $output_file has a value"
.PD
.ie n .SS "stringify_attributes($context, $option, $bracket)"
.el .SS "stringify_attributes($context, \f(CW$option\fP, \f(CW$bracket\fP)"
.IX Subsection "stringify_attributes($context, $option, $bracket)"
Returns a string suitable to writing to the output stream.
.PP
\&\f(CW$context\fR is one of 'edge', 'graph', 'node', or a special string. See the code for details.
.PP
You wouldn't normally need to use this method.
.ie n .SS "validate_params($context, %attributes)"
.el .SS "validate_params($context, \f(CW%attributes\fP)"
.IX Subsection "validate_params($context, %attributes)"
Validate the given attributes within the given context.
.PP
Returns \f(CW$self\fR to allow method chaining.
.PP
\&\f(CW$context\fR is one of 'edge', 'global', 'graph', 'node' or 'output_format'.
.PP
You wouldn't normally need to use this method.
.SS "verbose([$integer])"
.IX Subsection "verbose([$integer])"
Gets or sets the verbosity level, for when a logging object is not used.
.PP
Here, [] indicates an optional parameter.
.SH "FAQ"
.IX Header "FAQ"
.SS "o How do I print output files?"
.IX Subsection "o How do I print output files?"
Under Unix, output as \s-1PDF\s0, and then try: lp \-o fitplot html/parse.marpa.pdf.
.SS "o I'm having trouble with special characters in node names and labels"
.IX Subsection "o I'm having trouble with special characters in node names and labels"
GraphViz2 escapes these characters in those contexts: []{}.
.PP
Double-quotes are escaped when the label is \fInot\fR an \s-1HTML\s0 label. See scripts/html.labels.pl for sample code using font color.
.PP
It would be nice to also escape | and <, but these characters are used in specifying ports in records.
.PP
See the next point for details.
.SS "A warning about Graphviz <http://www.graphviz.org/> and ports"
.IX Subsection "A warning about Graphviz <http://www.graphviz.org/> and ports"
Ports are what Graphviz <http://www.graphviz.org/> calls those places on the outline of a node where edges
leave and terminate.
.PP
The Graphviz <http://www.graphviz.org/> syntax for ports is a bit unusual:
.ie n .IP "o This works: ""node_name"":port5" 4
.el .IP "o This works: ``node_name'':port5" 4
.IX Item "o This works: node_name:port5"
.PD 0
.ie n .IP "o This doesn't: ""node_name:port5""" 4
.el .IP "o This doesn't: ``node_name:port5''" 4
.IX Item "o This doesn't: node_name:port5"
.PD
.PP
You don't have to quote all node names in Graphviz <http://www.graphviz.org/>, but some, such as digits, must be quoted, so I've decided to quote them all.
.SS "Why does GraphViz plot top-to-bottom but GraphViz2::Parse::ISA plot bottom-to-top?"
.IX Subsection "Why does GraphViz plot top-to-bottom but GraphViz2::Parse::ISA plot bottom-to-top?"
Because the latter knows the data is a class structure. The former makes no assumptions about the nature of the data.
.SS "I'm having trouble with ports"
.IX Subsection "I'm having trouble with ports"
The code in GraphViz2's \fIadd_edge()\fR method assumes my convention that port names match /:port\ed{1,}/.
.PP
This matches the code in the \fIadd_node()\fR method, where port names are generated.
.PP
If you adopt this convention, you should have no problems.
.SS "What happened to GraphViz::No?"
.IX Subsection "What happened to GraphViz::No?"
The default_node(%hash) method in GraphViz2 allows you to make nodes vanish.
.PP
Try: \f(CW$graph\fR \-> default_node(label => '', height => 0, width => 0, style => 'invis');
.PP
Because that line is so simple, I feel it's unnecessary to make a subclass of GraphViz2.
.SS "What happened to GraphViz::Regex?"
.IX Subsection "What happened to GraphViz::Regex?"
See GraphViz2::Parse::Regexp.
.SS "What happened to GraphViz::Small?"
.IX Subsection "What happened to GraphViz::Small?"
The default_node(%hash) method in GraphViz2 allows you to make nodes which are small.
.PP
Try: \f(CW$graph\fR \-> default_node(label => '', height => 0.2, width => 0.2, style => 'filled');
.PP
Because that line is so simple, I feel it's unnecessary to make a subclass of GraphViz2.
.SS "What happened to GraphViz::XML?"
.IX Subsection "What happened to GraphViz::XML?"
Use GraphViz2::Parse::XML instead, which uses the pure-Perl XML::Tiny.
.PP
Alternately, see \*(L"Scripts Shipped with this Module\*(R" in GraphViz2 for how to use XML::Bare, GraphViz2
and GraphViz2::Data::Grapher instead.
.PP
See \*(L"scripts/parse.xml.pp.pl\*(R" or \*(L"scripts/parse.xml.bare.pl\*(R" below.
.SS "GraphViz returned a node name from \fIadd_node()\fP when given an anonymous node. What does GraphViz2 do?"
.IX Subsection "GraphViz returned a node name from add_node() when given an anonymous node. What does GraphViz2 do?"
You can give the node a name, and an empty string for a label, to suppress plotting the name.
.PP
See \*(L"scripts/anonymous.pl\*(R" for demo code.
.PP
If there is some specific requirement which this does not cater for, let me know and I can change the code.
.SS "Why such a different approach to logging?"
.IX Subsection "Why such a different approach to logging?"
As you can see from scripts/*.pl, I always use Log::Handler.
.PP
By default (i.e. without a logger object), GraphViz2 prints warning and debug messages to \s-1STDOUT\s0,
and dies upon errors.
.PP
However, by supplying a log object, you can capture these events.
.PP
Not only that, you can change the behaviour of your log object at any time, by calling
\&\*(L"logger($logger_object)\*(R".
.SS "A Note about \s-1XML\s0 Containers"
.IX Subsection "A Note about XML Containers"
The 2 demo programs \*(L"scripts/parse.html.pl\*(R" and \*(L"scripts/parse.xml.bare.pl\*(R", which both use XML::Bare, assume your \s-1XML\s0 has a single
parent container for all other containers. The programs use this container to provide a name for the root node of the graph.
.SS "Why did you choose Hash::FieldHash over Moose?"
.IX Subsection "Why did you choose Hash::FieldHash over Moose?"
My policy is to use Hash::FieldHash for stand-alone modules and Moose for applications.
.SH "Scripts Shipped with this Module"
.IX Header "Scripts Shipped with this Module"
.SS "scripts/anonymous.pl"
.IX Subsection "scripts/anonymous.pl"
Demonstrates empty strings for node names and labels.
.PP
Outputs to ./html/anonymous.svg by default.
.SS "scripts/cluster.pl"
.IX Subsection "scripts/cluster.pl"
Demonstrates building a cluster as a subgraph.
.PP
Outputs to ./html/cluster.svg by default.
.PP
See also scripts/macro.*.pl below.
.SS "scripts/dbi.schema.pl"
.IX Subsection "scripts/dbi.schema.pl"
If the environment vaiables \s-1DBI_DSN\s0, \s-1DBI_USER\s0 and \s-1DBI_PASS\s0 are set (the latter 2 are optional), then this demonstrates building a
graph from a database schema.
.PP
Outputs to ./html/dbi.schema.svg by default.
.SS "scripts/dependency.pl"
.IX Subsection "scripts/dependency.pl"
Demonstrates graphing an Algorithm::Dependency source.
.PP
Outputs to ./html/dependency.svg by default.
.PP
The default for GraphViz2 is to plot from the top to the bottom. This is the opposite of GraphViz2::Parse::ISA.
.PP
See also parse.isa.pl below.
.SS "scripts/extract.arrow.shapes.pl"
.IX Subsection "scripts/extract.arrow.shapes.pl"
Downloads the arrow shapes from Graphviz's Arrow Shapes <http://www.graphviz.org/content/arrow-shapes> and outputs them to ./data/arrow.shapes.html.
Then it extracts the reserved words into ./data/arrow.shapes.dat.
.SS "scripts/extract.attributes.pl"
.IX Subsection "scripts/extract.attributes.pl"
Downloads the attributes from Graphviz's Attributes <http://www.graphviz.org/content/attrs> and outputs them to ./data/attributes.html.
Then it extracts the reserved words into ./data/attributes.dat.
.SS "scripts/extract.node.shapes.pl"
.IX Subsection "scripts/extract.node.shapes.pl"
Downloads the node shapes from Graphviz's Node Shapes <http://www.graphviz.org/content/node-shapes> and outputs them to ./data/node.shapes.html.
Then it extracts the reserved words into ./data/node.shapes.dat.
.SS "scripts/extract.output.formats.pl"
.IX Subsection "scripts/extract.output.formats.pl"
Downloads the output formats from Graphviz's Output Formats <http://www.graphviz.org/content/output-formats> and outputs them to ./data/output.formats.html.
Then it extracts the reserved words into ./data/output.formats.dat.
.SS "scripts/generate.demo.pl"
.IX Subsection "scripts/generate.demo.pl"
Run by scripts/generate.svg.sh. See next point.
.SS "scripts/generate.png.sh"
.IX Subsection "scripts/generate.png.sh"
See scripts/generate.svg.sh for details.
.PP
Outputs to /tmp by default.
.SS "scripts/generate.svg.sh"
.IX Subsection "scripts/generate.svg.sh"
A bash script to run all the scripts and generate the *.svg and *.log files, in ./html.
.PP
You can them copy html/*.html and html/*.svg to your web server's doc root, for viewing.
.PP
Outputs to /tmp by default.
.SS "scripts/Heawood.pl"
.IX Subsection "scripts/Heawood.pl"
Demonstrates the transitive 6\-net, also known as Heawood's graph.
.PP
Outputs to ./html/Heawood.svg by default.
.PP
This program was reverse-engineered from graphs/undirected/Heawood.gv in the distro for Graphviz <http://www.graphviz.org/> V 2.26.3.
.SS "scripts/html.labels.pl"
.IX Subsection "scripts/html.labels.pl"
Demonstrates a trivial 3\-node graph, with colors and \s-1HTML\s0 labels.
.PP
Outputs to ./html/html.labels.svg by default.
.SS "scripts/macro.1.pl"
.IX Subsection "scripts/macro.1.pl"
Demonstrates non-cluster subgraphs via a macro.
.PP
Outputs to ./html/macro.1.svg by default.
.SS "scripts/macro.2.pl"
.IX Subsection "scripts/macro.2.pl"
Demonstrates linked non-cluster subgraphs via a macro.
.PP
Outputs to ./html/macro.2.svg by default.
.SS "scripts/macro.3.pl"
.IX Subsection "scripts/macro.3.pl"
Demonstrates cluster subgraphs via a macro.
.PP
Outputs to ./html/macro.3.svg by default.
.SS "scripts/macro.4.pl"
.IX Subsection "scripts/macro.4.pl"
Demonstrates linked cluster subgraphs via a macro.
.PP
Outputs to ./html/macro.4.svg by default.
.SS "scripts/macro.5.pl"
.IX Subsection "scripts/macro.5.pl"
Demonstrates compound cluster subgraphs via a macro.
.PP
Outputs to ./html/macro.5.svg by default.
.SS "scripts/parse.data.pl"
.IX Subsection "scripts/parse.data.pl"
Demonstrates graphing a Perl data structure.
.PP
Outputs to ./html/parse.data.svg by default.
.SS "scripts/parse.html.pl"
.IX Subsection "scripts/parse.html.pl"
Demonstrates using XML::Bare to parse \s-1HTML\s0.
.PP
Inputs from ./t/sample.html, and outputs to ./html/parse.html.svg by default.
.SS "scripts/parse.isa.pl"
.IX Subsection "scripts/parse.isa.pl"
Demonstrates graphing a Perl class hierarchy.
.PP
Outputs to ./html/parse.isa.svg by default.
.PP
The default for GraphViz2::Parse::ISA is to plot from the bottom to the top (Grandchild to Parent).
This is the opposite of GraphViz2.
.PP
See also dependency.pl, above.
.SS "scripts/parse.marpa.pl"
.IX Subsection "scripts/parse.marpa.pl"
Demonstrates graphing a Marpa\-style grammar.
.PP
Inputs from t/sample.marpa.1 and outputs to ./html/parse.marpa.svg by default.
.PP
The input grammar was extracted from Graph::Easy::Marpa::Parser V 0.70, before the grammar supported Graph::Easy's groups.
.SS "scripts/parse.recdescent.pl"
.IX Subsection "scripts/parse.recdescent.pl"
Demonstrates graphing a Parse::RecDescent\-style grammar.
.PP
Inputs from t/sample.recdescent.1.dat and outputs to ./html/parse.recdescent.svg by default.
.PP
The input grammar was extracted from t/basics.t in Parse::RecDescent V 1.965001.
.PP
You can patch the *.pl to read from t/sample.recdescent.2.dat, which was copied from a V 2 bug report <https://rt.cpan.org/Ticket/Display.html?id=36057>.
.SS "scripts/parse.regexp.pl"
.IX Subsection "scripts/parse.regexp.pl"
Demonstrates graphing a Perl regular expression.
.PP
Outputs to ./html/parse.regexp.svg by default.
.SS "scripts/parse.stt.pl"
.IX Subsection "scripts/parse.stt.pl"
Demonstrates graphing a Set::FA::Element\-style state transition table.
.PP
Inputs from t/sample.stt.1.dat and outputs to ./html/parse.stt.svg by default.
.PP
The input grammar was extracted from Set::FA::Element.
.PP
You can patch the *.pl to read from t/sample.stt.2.dat, which was output by Graph::Easy::Marpa::DFA V 0.70.
.SS "scripts/parse.yacc.pl"
.IX Subsection "scripts/parse.yacc.pl"
Demonstrates graphing a byacc <http://invisible-island.net/byacc/byacc.html>\-style grammar.
.PP
Inputs from t/calc3.output, and outputs to ./html/parse.yacc.svg by default.
.PP
The input was copied from test/calc3.y in byacc V 20101229 and process as below.
.PP
Note: The version downloadable via \s-1HTTP\s0 is 20101127.
.PP
I installed byacc like this:
.PP
.Vb 1
\&        sudo apt\-get byacc
.Ve
.PP
Now get a sample file to work with:
.PP
.Vb 9
\&        cd ~/Downloads
\&        curl ftp://invisible\-island.net/byacc/byacc.tar.gz > byacc.tar.gz
\&        tar xvzf byacc.tar.gz
\&        cd ~/perl.modules/GraphViz2
\&        cp ~/Downloads/byacc\-20101229/test/calc3.y t
\&        byacc \-v t/calc3.y
\&        mv y.output t/calc3.output
\&        diff ~/Downloads/byacc\-20101229/test/calc3.output t/calc3.output
\&        rm y.tab.c
.Ve
.PP
It's the file calc3.output which ships in the t/ directory.
.SS "scripts/parse.yapp.pl"
.IX Subsection "scripts/parse.yapp.pl"
Demonstrates graphing a Parse::Yapp\-style grammar.
.PP
Inputs from t/calc.output, and outputs to ./html/parse.yapp.svg by default.
.PP
The input was copied from t/calc.t in Parse::Yapp's and processed as below.
.PP
I installed Parse::Yapp (and yapp) like this:
.PP
.Vb 1
\&        cpanm Parse::Yapp
.Ve
.PP
Now get a sample file to work with:
.PP
.Vb 2
\&        cd ~/perl.modules/GraphViz2
\&        cp ~/.cpanm/latest\-build/Parse\-Yapp\-1.05/t/calc.t t/calc.input
.Ve
.PP
Edit t/calc.input to delete the code, leaving the grammar after the _\|_DATA_\|_token.
.PP
.Vb 2
\&        yapp \-v t/calc.input > t/calc.output
\&        rm t/calc.pm
.Ve
.PP
It's the file calc.output which ships in the t/ directory.
.SS "scripts/parse.xml.bare.pl"
.IX Subsection "scripts/parse.xml.bare.pl"
Demonstrates using XML::Bare to parse \s-1XML\s0.
.PP
Inputs from ./t/sample.xml, and outputs to ./html/parse.xml.bare.svg by default.
.SS "scripts/parse.xml.pp.pl"
.IX Subsection "scripts/parse.xml.pp.pl"
Demonstrates using XML::Tiny to parse \s-1XML\s0.
.PP
Inputs from ./t/sample.xml, and outputs to ./html/parse.xml.pp.svg by default.
.SS "scripts/quote.pl"
.IX Subsection "scripts/quote.pl"
Demonstrates embedded newlines and double-quotes in node names and labels.
.PP
It also demonstrates that the justification escapes, \el and \er, work too, sometimes.
.PP
Outputs to ./html/quote.svg by default.
.PP
Tests which run dot directly show this is a bug in Graphviz <http://www.graphviz.org/> itself.
.PP
For example, in this graph, it looks like \er only works after \el (node d), but not always (nodes b, c).
.PP
Call this x.dot:
.PP
.Vb 8
\&        digraph G {
\&                rankdir=LR;
\&                node [shape=oval];
\&                a [ label ="a: Far, far, Left\erRight"];
\&                b [ label ="\elb: Far, far, Left\erRight"];
\&                c [ label ="XXX\elc: Far, far, Left\erRight"];
\&                d [ label ="d: Far, far, Left\elRight\erRight"];
\&        }
.Ve
.PP
and use the command:
.PP
.Vb 1
\&        dot \-Tsvg x.dot
.Ve
.PP
See the Graphviz docs <http://www.graphviz.org/content/attrs#kescString> for escString, where they write 'l to mean \el, for some reason.
.SS "scripts/report.valid.attributes.pl"
.IX Subsection "scripts/report.valid.attributes.pl"
Prints all current (V 2.23.6) Graphviz <http://www.graphviz.org/> attributes, along with a few global ones I've invented for the purpose of writing this module.
.PP
Outputs to \s-1STDOUT\s0.
.SS "scripts/sub.graph.pl"
.IX Subsection "scripts/sub.graph.pl"
Demonstrates a graph combined with a subgraph.
.PP
Outputs to ./html/sub.graph.svg by default.
.SS "scripts/sub.sub.graph.pl"
.IX Subsection "scripts/sub.sub.graph.pl"
Demonstrates a graph combined with a subgraph combined with a subsubgraph.
.PP
Outputs to ./html/sub.sub.graph.svg by default.
.SS "scripts/trivial.pl"
.IX Subsection "scripts/trivial.pl"
Demonstrates a trivial 3\-node graph, with colors, just to get you started.
.PP
Outputs to ./html/trivial.svg by default.
.SH "TODO"
.IX Header "TODO"
.IP "o Does GraphViz2 need to emulate the sort option in GraphViz?" 4
.IX Item "o Does GraphViz2 need to emulate the sort option in GraphViz?"
That depends on what that option really does.
.IP "o Handle edges such as 1 \-> 2 \-> {A B}, as seen in Graphviz <http://www.graphviz.org/>'s graphs/directed/switch.gv" 4
.IX Item "o Handle edges such as 1 -> 2 -> {A B}, as seen in Graphviz <http://www.graphviz.org/>'s graphs/directed/switch.gv"
But how?
.IP "o Validate parameters more carefully, e.g. to reject non-hashref arguments where appropriate" 4
.IX Item "o Validate parameters more carefully, e.g. to reject non-hashref arguments where appropriate"
Some method parameter lists take keys whose value must be a hashref.
.SH "A Extremely Short List of Other Graphing Software"
.IX Header "A Extremely Short List of Other Graphing Software"
Axis Maps <http://www.axismaps.com/>.
.PP
Polygon Map Generation <http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/>.
Read more on that here <http://blogs.perl.org/users/max_maischein/2011/06/display-your-data---randompoissondisc.html>.
.PP
Voronoi Applications <http://www.voronoi.com/wiki/index.php?title=Voronoi_Applications>.
.SH "Thanks"
.IX Header "Thanks"
Many thanks are due to the people who chose to make Graphviz <http://www.graphviz.org/> Open Source.
.PP
And thanks to Leon Brocard <http://search.cpan.org/~lbrocard/>, who wrote GraphViz, and kindly gave me co-maint of the module.
.SH "Version Numbers"
.IX Header "Version Numbers"
Version numbers < 1.00 represent development versions. From 1.00 up, they are production versions.
.SH "Machine-Readable Change Log"
.IX Header "Machine-Readable Change Log"
The file \s-1CHANGES\s0 was converted into Changelog.ini by Module::Metadata::Changes.
.SH "Support"
.IX Header "Support"
Email the author, or log a bug on \s-1RT:\s0
.PP
<https://rt.cpan.org/Public/Dist/Display.html?Name=GraphViz2>.
.SH "Author"
.IX Header "Author"
GraphViz2 was written by Ron Savage \fI<ron@savage.net.au>\fR in 2011.
.PP
Home page: <http://savage.net.au/index.html>.
.SH "Copyright"
.IX Header "Copyright"
Australian copyright (c) 2011, Ron Savage.
.PP
.Vb 4
\&        All Programs of mine are \*(AqOSI Certified Open Source Software\*(Aq;
\&        you can redistribute them and/or modify them under the terms of
\&        The Artistic License, a copy of which is available at:
\&        http://www.opensource.org/licenses/index.html
.Ve
